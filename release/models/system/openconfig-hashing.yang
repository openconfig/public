module openconfig-hashing {
    yang-version "1";

    // namespace
    namespace "http://openconfig.net/yang/hashing";

    prefix "oc-hashing";

    // import some basic types
    import openconfig-extensions { prefix oc-ext; }
    import openconfig-system {prefix oc-sys;}
    import openconfig-interfaces {prefix oc-intf;}

    // meta
    organization "OpenConfig working group";

    contact
      "OpenConfig working group
      netopenconfig@googlegroups.com";

    description
      "Model for managing hashing policies that would be referenced by the
      interfaces model.";


    oc-ext:openconfig-version "0.1.0";

    revision "2023-08-08" {
        description "Initial hashing model.";
        reference "0.1.0";
    }

    oc-ext:catalog-organization "openconfig";
    oc-ext:origin "openconfig";

    typedef hash-field-type-ipv4 {
        type enumeration {
            enum NONE {
                description "Do not use any IPv4 fields in the
                    calculation of the hash.";
            }
            enum SRC_ADDRESS {
                description "Use only the IPv4 source address in the
                    calculation of the hash.";
            }
            enum DST_ADDRESS {
                description "Use only the IPv4 destination address in the
                    calculation of the hash.";
            }
            enum BOTH {
                description "Use both the IPv4 source and
                    destination addresses in the calculation of the
                    hash.";
            }
            enum TARGET_DEFINED {
                description "Use fields that are defined by the device for
                calculating the hash.  Use of this enum is expected when the
                target contains some default or hardcoded selection of fields
                which are not described by this model.  For example,
                implementation may select only a portion of the bits in the
                source and destination ip address fields.  Which bits are used
                may not be exposed and may not be configurable by the user, by
                the OPERATING_SYSTEM or by the INTEGRATED_CIRCUIT.  If a
                TARGET_DEFINED mode isn't available on an implementation, an
                UNIMPLEMENTED (12) error should be returned if it is attempted
                to be used.";

            }
        }
        description "The IPv4 fields that should be used to
            compute the hash.";
    }

    typedef hash-field-type-ipv6 {
        type enumeration {
            enum NONE {
                description "Do not use any IPv6 fields in the
                    calculation of the hash.";
            }
            enum SRC_ADDRESS {
                description "Use only the IPv6 source address in the
                    calculation of the hash.";
            }
            enum DST_ADDRESS {
                description "Use only the IPv6 destination address in the
                    calculation of the hash.";
            }
            enum BOTH {
                description "Use both the IPv6 source and
                    destination addresses in the calculation of the
                    hash.";
            }
            enum TARGET_DEFINED {
                description "Use the default fields that are used by
                    the device for calculating the hash.";
            }
            enum FLOW_LABEL {
                description "Use the flow label in the IPv6 header
                    to calculate the hash.";
            }
        }
        description "The IPv6 fields that should be used to
            compute the hash.";
    }

    typedef hash-field-type-transport {
        type enumeration {
            enum NONE {
                description "Do not use any transport fields in the
                    calculation of the hash.";
            }
            enum SRC_PORT {
                description "Use only the source port from the
                    transport header in the calculation of the hash.";
            }
            enum DST_PORT {
                description "Use only the destination port from the
                    transport header in the calculation of the hash.";
            }
            enum BOTH {
                description "Use both the source and
                    destination ports from the transport header in
                    the calculation of the hash.";
            }
            enum TARGET_DEFINED {
                description "Use transport fields that are defined by the device for calculating the hash.  Use of this enum is expected when the target contains some default or hardcoded selection of fields which are not described by this model.  For example, an implementation may select only a portion of the bits in the port number fields or may only support fields for a limited set of transports.  Which transports and bits are used may not be exposed and may not be configurable by the user, by the OPERATING_SYSTEM or by the INTEGRATED_CIRCUIT.  If a TARGET_DEFINED mode isn't available on an implementation, an UNIMPLEMENTED (12) error should be returned if it is attempted to be used..";
            }
        }
        description "The transport layer fields that should be used to
            compute the hash.";
    }

    grouping hashing-inputs {
        description
            "Top level container for inputs to be used for hashing policies.";

        leaf ipv4 {
            type hash-field-type-ipv4;
            description "The IPv4 fields that should be used to
                compute the hash.";
        }
        leaf ipv6 {
            type hash-field-type-ipv6;
            description "The IPv6 fields that should be used to
                compute the hash.";
        }

        leaf transport-ports {
            type hash-field-type-transport;
            description "The transport layer fields that should be used to
                compute the hash.";
        }

        uses ingress-interface-top;
    }

    grouping ingress-interface-top {
        description "Top-level container for ingress subinterface.";
        leaf ingress-interface {
            type boolean;
            description "Use the ingress subinterface identifired in the
                calculation of the hash.";
        }
    }

    grouping hashing-policy-config {
        description
          "Configuration data for hashing policies.";

        leaf name {
            type string;
            description
              "The name of the hashing policy.
              When a configured user-controlled policy is created by the
              system, it is instantiated with the same name in the
              /system/hashing-policies/hashing-policy/name list.";
        }

        leaf seed {
            type uint64;
            description
                "The seed used to initialize the hash algorithm";
        }

        leaf algorithm {
            type string;
            description
                "The name of hash algorithm. This algorithm MUST
                be a supported algorithm";
        }
    }

    grouping hashing-policy-top {
        description
            "Top level grouping for hashing configuration and operational state
            data.";

        container hashing-policies {
            description
              "Top level container for hashing, including configuration and
              state data.";

            list hashing-policy {
                key "name";

                description
                  "The list of named policies to be used on the device.";

                leaf name {
                    type leafref {
                        path "../config/name";
                    }
                    description
                      "References the name of the hashing policy.";
                }
                container config {
                    description
                      "Configurable items at the global hash policy level.";

                    uses hashing-policy-config;
                }
                container state {
                    config false;
                    description
                      "Operational state data at the global hash policy
                      level.";

                    uses hashing-policy-config;
                }
                container hash-field-modes {
                    description
                        "Container for specifying inputs to be used when
                        calculating the hash.";
                    container config {
                        description
                            "Configurable items at the hashing inputs level.";
                        uses hashing-inputs;
                    }
                    container state {
                        config false;
                        description "Operational state data at the hashing
                            inputs level.";
                        uses hashing-inputs;
                    }
                }
            }
        }
    }

    grouping supported-algorithms-state {
        description
            "Top-level container for the supported algorithms.";
        leaf name {
            type string;
            description
                "Name of the supported algorithm.";
        }
        leaf description {
            type string;
            description
                "Description of the supported algorithm.";
        }
    }
    grouping supported-algorithms-top {
        description
            "Top-level container of the supported algorithms for supported
            algorithms.  The list of algorithms are expected to be defined by
            the target device.";
        container hashing-algorithms {
            config false;
            description
                "Container of the supported algorithms for supported
                algorithms.";
            list hashing-algorithm {
                key "name";

                description
                    "List of the supported algorithms for supported
                    algorithms.";

                leaf name {
                    type leafref {
                        path "../state/name";
                    }
                    description
                        "Reference to the supported algorithm list key.";
                }

                container state {
                    description
                        "Operational data for the supported algorithm.";
                    config false;
                    uses supported-algorithms-state;
                }
            }
        }
    }

    grouping hashing-top {
        description
            "Top-level container for Hashing algorithms and hashing policies";
        uses supported-algorithms-top;
        uses hashing-policy-top;
    }

    augment "/oc-sys:system" {
        description
            "Augment for Hashing algorithms and hashing policies";

        uses hashing-top;
    }

    augment "/oc-intf:interfaces/oc-intf:interface/oc-intf:config" {
        leaf hashing-policy {
            type leafref {
                path "/oc-sys:system/hashing-policies/hashing-policy/name";
            }
            description "The configuration data hashing policy to be used when
                hashing packets coming in on the interface.";
        }
    }

    augment "/oc-intf:interfaces/oc-intf:interface/oc-intf:state" {
        leaf hashing-policy {
            type leafref {
                path "/oc-sys:system/hashing-policies/hashing-policy/name";
            }
            description "The operational data hashing policy to be used when
                hashing packets coming in on the interface.";
        }
    }
}